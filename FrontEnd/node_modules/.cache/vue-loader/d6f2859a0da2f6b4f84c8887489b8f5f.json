{"remainingRequest":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\src\\components\\TableCleanser.vue?vue&type=style&index=0&id=29356a00&lang=css","dependencies":[{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\src\\components\\TableCleanser.vue","mtime":1648241274215},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\css-loader\\dist\\cjs.js","mtime":1644423218600},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1644423220162},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\postcss-loader\\src\\index.js","mtime":1644423219175},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644423218092},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1644423219480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpidXR0b24gew0KICBjb2xvcjogd2hpdGU7DQogIGJhY2tncm91bmQ6ICMwYzhjZDM7DQogIGJvcmRlcjogMHB4IHNvbGlkIGJsdWU7DQogIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg=="},{"version":3,"sources":["C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\src\\components\\TableCleanser.vue"],"names":[],"mappings":";AA6MA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpB","file":"C:/Users/efstr/OneDrive/Desktop/ProjectAthena/AthenaSRC/FrontEnd/src/components/TableCleanser.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <DataTable\r\n    :value=\"cleansers\"\r\n    v-model:selection=\"selected_cleanser\"\r\n    dataKey=\"cleanser_id\"\r\n    :paginator=\"true\"\r\n    :rows=\"10\"\r\n    filterDisplay=\"menu\"\r\n    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n    :rowsPerPageOptions=\"[10, 25, 50]\"\r\n    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\r\n    responsiveLayout=\"scroll\"\r\n  >\r\n    <template #header>\r\n      <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n        <h5 class=\"p-m-0\">Cleansers</h5>\r\n        <span class=\"p-input-icon-left\">\r\n          <i class=\"pi pi-search\" />\r\n          <InputText placeholder=\"Keyword Search\" />\r\n        </span>\r\n      </div>\r\n    </template>\r\n    <template #empty>\r\n      <span v-if=\"cleansers_loading\">\r\n        Loading Cleansers. Please wait.\r\n        <ProgressBar mode=\"indeterminate\" />\r\n      </span>\r\n      <span v-else> There are no cleansers. </span>\r\n    </template>\r\n    <template #loading>\r\n      Loading Cleansers. Please wait. <ProgressBar mode=\"indeterminate\" />\r\n    </template>\r\n    <Column selectionMode=\"multiple\" style=\"min-width: 3rem\"></Column>\r\n    <Column field=\"cleanser_id\" header=\"ID\" sortable style=\"min-width: auto\">\r\n    </Column>\r\n    <Column field=\"name\" header=\"Name\" sortable style=\"min-width: auto\">\r\n    </Column>\r\n    <Column\r\n      field=\"description\"\r\n      header=\"Description\"\r\n      sortable\r\n      style=\"min-width: auto\"\r\n    >\r\n    </Column>\r\n    <Column\r\n      field=\"datasets\"\r\n      header=\"Supporting Datasets\"\r\n      style=\"min-width: auto\"\r\n    >\r\n      <template #body=\"slotProps\">\r\n        <Dropdown :options=\"slotProps.data.datasets\" placeholder=\"Datasets\" />\r\n      </template>\r\n    </Column>\r\n\r\n    <Column header=\"Supporting Headers\" style=\"min-width: auto\">\r\n      <template #body=\"slotProps\">\r\n        <Dropdown :options=\"slotProps.data.header_list\" placeholder=\"Headers\" />\r\n      </template>\r\n    </Column>\r\n    <Column\r\n      field=\"cleanser_operation_types\"\r\n      header=\"Supporting Cleansing Operations\"\r\n      style=\"min-width: auto\"\r\n    >\r\n      <template #body=\"slotProps\">\r\n        <Dropdown\r\n          :options=\"slotProps.data.cleanser_operation_types\"\r\n          placeholder=\"Operations\"\r\n        />\r\n      </template>\r\n    </Column>\r\n    <Column header=\"Ad hoc Operations\" style=\"min-width: auto\">\r\n      <template #body>\r\n        <div>\r\n          <SpeedDial\r\n            :model=\"items\"\r\n            :radius=\"50\"\r\n            direction=\"right\"\r\n            type=\"right\"\r\n            buttonClass=\"p-button-secondary\"\r\n            style=\"position: relative\"\r\n          />\r\n        </div>\r\n        <ProgressBar mode=\"indeterminate\" v-if=\"cleanser_operating\" />\r\n      </template>\r\n    </Column>\r\n  </DataTable>\r\n</template>\r\n \r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      cleansers: this.listCleansers(),\r\n      selected_cleanser: \"\",\r\n      cleansers_loading: true,\r\n      cleanser_operating: false,\r\n      items: [\r\n        {\r\n          label: \"Delete\",\r\n          icon: \"pi pi-trash\",\r\n          command: () => {\r\n            this.deleteSelected();\r\n          },\r\n        },\r\n        {\r\n          label: \"Update\",\r\n          icon: \"pi pi-refresh\",\r\n          command: () => {\r\n            this.getSelectedToUpdate();\r\n          },\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    getSelectedToUpdate() {\r\n      if (\r\n        this.selected_cleanser.length === 1 &&\r\n        this.selected_cleanser.length !== 0\r\n      ) {\r\n        this.$emit(\"update\", this.selected_cleanser[0]);\r\n      } else {\r\n        this.$toast.add({\r\n          severity: \"warn\",\r\n          summary: \"None or More than 1 Cleanser selected\",\r\n          detail: \"Please select only one Cleanser to display\",\r\n          life: 4000,\r\n        });\r\n      }\r\n    },\r\n    normalizeCleanser() {\r\n      for (let index = 0; index < this.cleansers.length; index++) {\r\n        for (var key in this.cleansers[index]) {\r\n          if (key === \"header_list\") {\r\n            this.cleansers[index][key] = this.cleansers[index][key].split(\",\");\r\n          }\r\n          if (key === \"datasets\") {\r\n            this.cleansers[index][key] = this.cleansers[index][key].split(\",\");\r\n          }\r\n          if (key === \"cleanser_operation_types\") {\r\n            this.cleansers[index][key] = this.cleansers[index][key].split(\",\");\r\n          }\r\n        }\r\n      }\r\n    },\r\n    deleteSelected() {\r\n      for (let index = 0; index < this.selected_cleanser.length; index++) {\r\n        this.deleteCleanser(this.selected_cleanser[index].cleanser_id);\r\n      }\r\n    },\r\n    deleteCleanser(cleanser_id) {\r\n      if (cleanser_id === undefined) {\r\n        this.$toast.add({\r\n          severity: \"warn\",\r\n          summary: \"No Cleanser selected\",\r\n          detail: \"Please select Cleanser first\",\r\n          life: 3000,\r\n        });\r\n      } else {\r\n        this.cleanser_operating = true;\r\n      }\r\n      this.$axios\r\n        .delete(\"/delete_cleanser/\" + cleanser_id)\r\n        .then(() => {\r\n          this.listCleansers();\r\n          if (this.cleanser_operating == true) {\r\n            this.$toast.add({\r\n              severity: \"success\",\r\n              summary: \"Cleanser successfully deleted\",\r\n              detail: \"Cleanser was successfully deleted\",\r\n              life: 3000,\r\n            });\r\n          }\r\n          this.cleanser_operating = false;\r\n          this.selected_cleanser = \"\";\r\n        })\r\n        .catch(() => {\r\n          this.cleanser_operating = false;\r\n          this.$toast.add({\r\n            severity: \"error\",\r\n            summary: \"Cleanser Deletion Unsuccessful\",\r\n            detail: \"The selected Cleanser could not be deleted\",\r\n            life: 3000,\r\n          });\r\n          this.selected_cleanser = \"\";\r\n        });\r\n    },\r\n    strToList(strings) {\r\n      const list_string = strings.split(\",\");\r\n      return list_string;\r\n    },\r\n    listCleansers() {\r\n      this.$axios.get(\"/get_cleansers\").then((res) => {\r\n        this.cleansers = res.data.data;\r\n        this.normalizeCleanser();\r\n        if (this.cleansers.length === 0) {\r\n          this.cleansers_loading = false;\r\n        }\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\nbutton {\r\n  color: white;\r\n  background: #0c8cd3;\r\n  border: 0px solid blue;\r\n  border-radius: 2px;\r\n}\r\n</style>"]}]}