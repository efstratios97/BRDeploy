{"remainingRequest":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\src\\components\\AddCleanser.vue?vue&type=style&index=0&id=0b2b6763&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\src\\components\\AddCleanser.vue","mtime":1641398527843},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\css-loader\\dist\\cjs.js","mtime":1644423218600},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1644423220162},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\postcss-loader\\src\\index.js","mtime":1644423219175},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644423218092},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1644423219480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpsYWJlbCB7DQogIGRpc3BsYXk6IGJsb2NrOw0KfQ0KDQouYnRuLWZvcm0gew0KICBjb2xvcjogd2hpdGU7DQogIGJhY2tncm91bmQ6ICMwZDZlZmQ7DQogIGJvcmRlcjogMHB4IHNvbGlkIGJsdWU7DQogIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg0Kc2VsZWN0IHsNCiAgY29sb3I6IGJsYWNrOw0KfQ0KDQppbnB1dCB7DQogIGNvbG9yOiBibGFjazsNCn0NCg0KdGV4dGFyZWEgew0KICBjb2xvcjogYmxhY2s7DQp9DQo="},{"version":3,"sources":["C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\src\\components\\AddCleanser.vue"],"names":[],"mappings":";AAgLA,CAAC,CAAC,CAAC,CAAC,EAAE;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACd;;AAEA,CAAC,CAAC,CAAC,CAAC,EAAE;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACd;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACP,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACd","file":"C:/Users/efstr/OneDrive/Desktop/ProjectAthena/AthenaSRC/FrontEnd/src/components/AddCleanser.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <form>\r\n    <div class=\"p-grid p-fluid\">\r\n      <div class=\"p-col-12 p-md-12\">\r\n        <div class=\"p-inputgroup\">\r\n          <span class=\"p-inputgroup-addon\">\r\n            <i class=\"pi pi-cog\"></i>\r\n          </span>\r\n          <InputText\r\n            placeholder=\"Cleanser's Name\"\r\n            v-model=\"name\"\r\n            class=\"inputfield w-full\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"p-grid p-fluid\">\r\n      <div class=\"p-col-12 p-md-12\">\r\n        <Textarea\r\n          placeholder=\"Cleanser Description\"\r\n          v-model=\"description\"\r\n          :autoResize=\"true\"\r\n          rows=\"5\"\r\n          cols=\"30\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"p-grid p-fluid\">\r\n      <div class=\"p-col-12 p-md-12\">\r\n        <div class=\"p-inputgroup\">\r\n          <span class=\"p-inputgroup-addon\">\r\n            <i class=\"pi pi-file\"></i>\r\n          </span>\r\n          <MultiSelect\r\n            v-model=\"selected_datasets\"\r\n            :options=\"datasets\"\r\n            :filter=\"true\"\r\n            optionLabel=\"dataset\"\r\n            placeholder=\"Assign applicable Datasets\"\r\n            filterPlaceholder=\"Find Datasets\"\r\n            :showClear=\"true\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"p-grid p-fluid\">\r\n      <div class=\"p-col-12 p-md-12\">\r\n        <div class=\"p-inputgroup\">\r\n          <span class=\"p-inputgroup-addon\">\r\n            <i class=\"pi pi-cog\"></i>\r\n          </span>\r\n          <MultiSelect\r\n            v-model=\"selected_cleanser_operation_types\"\r\n            :options=\"cleanser_operation_types\"\r\n            :filter=\"true\"\r\n            optionLabel=\"operation\"\r\n            placeholder=\"Assign applicable Operations\"\r\n            filterPlaceholder=\"Find Operations\"\r\n            class=\"multiselect-custom\"\r\n            :showClear=\"true\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"p-grid p-fluid\">\r\n      <div class=\"p-col-12 p-md-12\">\r\n        <Button\r\n          label=\"Create Cleanser\"\r\n          icon=\"pi pi-plus-circle\"\r\n          iconPos=\"center\"\r\n          @click=\"createCleanser\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: \"\",\r\n      description: \"\",\r\n      datasets: this.getDatasetOptions(),\r\n      cleanser_operation_types: this.getCleanserOperationTypesOptions(),\r\n      selected_datasets: \"\",\r\n      selected_cleanser_operation_types: \"\",\r\n      formData: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    getDatasetOptions() {\r\n      this.$axios\r\n        .get(\"/get_datasets_only_name/\" + localStorage.loggedUser)\r\n        .then((res) => {\r\n          var datasets_tmp = [];\r\n          for (let index = 0; index < res.data.data.length; index++) {\r\n            datasets_tmp.push({\r\n              dataset:\r\n                \"NAME: \" +\r\n                res.data.data[index][\"name\"] +\r\n                \"   |   \" +\r\n                \"ID: \" +\r\n                res.data.data[index][\"dataset_id\"],\r\n            });\r\n          }\r\n          this.datasets = datasets_tmp;\r\n        });\r\n    },\r\n    getCleanserOperationTypesOptions() {\r\n      this.$axios.get(\"/get_cleanser_operation_types\").then((res) => {\r\n        var cleanser_operation_types_tmp = [];\r\n        for (let index = 0; index < res.data.data[0].length; index++) {\r\n          cleanser_operation_types_tmp.push({\r\n            operation: res.data.data[0][index],\r\n          });\r\n        }\r\n        this.cleanser_operation_types = cleanser_operation_types_tmp;\r\n      });\r\n    },\r\n    toString(dict_key) {\r\n      var object_input = \"\";\r\n      if (dict_key === \"dataset\") {\r\n        object_input = this.selected_datasets;\r\n      } else {\r\n        object_input = this.selected_cleanser_operation_types;\r\n      }\r\n      var updt_list = \"\";\r\n      for (let index = 0; index < object_input.length; index++) {\r\n        var temp_elem = object_input[index][dict_key];\r\n        if (dict_key === \"dataset\") {\r\n          temp_elem = object_input[index][dict_key].split(\"ID: \")[1];\r\n        }\r\n        updt_list = updt_list.concat(temp_elem);\r\n        updt_list = updt_list.concat(\",\");\r\n      }\r\n      return updt_list.slice(0, -1);\r\n    },\r\n    createCleanser() {\r\n      this.formData = new FormData();\r\n      this.formData.append(\"name\", this.name);\r\n      this.formData.append(\"datasets\", this.toString(\"dataset\"));\r\n      this.formData.append(\"description\", this.description);\r\n      this.formData.append(\r\n        \"cleanser_operation_types\",\r\n        this.toString(\"operation\")\r\n      );\r\n      this.$axios\r\n        .post(\"/create_cleanser\", this.formData)\r\n        .then(() => {\r\n          this.$toast.add({\r\n            severity: \"success\",\r\n            summary: \"Cleanser Creation Successful\",\r\n            detail: \"The selected Cleanser was created\",\r\n            life: 3000,\r\n          });\r\n          this.$emit(\"close\");\r\n        })\r\n        .catch(() => {\r\n          this.$toast.add({\r\n            severity: \"error\",\r\n            summary: \"Cleanser Creation Unsuccessful\",\r\n            detail:\r\n              \"The selected Cleanser could not be created! Check if given Name is a duplicate!\",\r\n            life: 3000,\r\n          });\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\nlabel {\r\n  display: block;\r\n}\r\n\r\n.btn-form {\r\n  color: white;\r\n  background: #0d6efd;\r\n  border: 0px solid blue;\r\n  border-radius: 2px;\r\n}\r\n\r\nselect {\r\n  color: black;\r\n}\r\n\r\ninput {\r\n  color: black;\r\n}\r\n\r\ntextarea {\r\n  color: black;\r\n}\r\n</style>"]}]}