{"remainingRequest":"C:\\Users\\Strat\\Desktop\\ProjectAthena\\AthenaSRC\\Frontend\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\Strat\\Desktop\\ProjectAthena\\AthenaSRC\\Frontend\\src\\components\\TableArchitectureViews.vue?vue&type=style&index=0&id=0be94e5d&lang=css","dependencies":[{"path":"C:\\Users\\Strat\\Desktop\\ProjectAthena\\AthenaSRC\\Frontend\\src\\components\\TableArchitectureViews.vue","mtime":1621010442906},{"path":"C:\\Users\\Strat\\Desktop\\ProjectAthena\\AthenaSRC\\Frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Strat\\Desktop\\ProjectAthena\\AthenaSRC\\Frontend\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Strat\\Desktop\\ProjectAthena\\AthenaSRC\\Frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Strat\\Desktop\\ProjectAthena\\AthenaSRC\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Strat\\Desktop\\ProjectAthena\\AthenaSRC\\Frontend\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpidXR0b24gew0KICBjb2xvcjogd2hpdGU7DQogIGJhY2tncm91bmQ6ICMwYzhjZDM7DQogIGJvcmRlcjogMHB4IHNvbGlkIGJsdWU7DQogIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg=="},{"version":3,"sources":["C:\\Users\\Strat\\Desktop\\ProjectAthena\\AthenaSRC\\Frontend\\src\\components\\TableArchitectureViews.vue"],"names":[],"mappings":";AAkKA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpB","file":"C:/Users/Strat/Desktop/ProjectAthena/AthenaSRC/Frontend/src/components/TableArchitectureViews.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <DataTable\r\n    :value=\"architecture_views\"\r\n    v-model:selection=\"selected_architecture_view\"\r\n    dataKey=\"architecture_view_id\"\r\n    :paginator=\"true\"\r\n    :rows=\"10\"\r\n    filterDisplay=\"menu\"\r\n    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n    :rowsPerPageOptions=\"[10, 25, 50]\"\r\n    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\r\n    responsiveLayout=\"scroll\"\r\n  >\r\n    <template #header>\r\n      <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n        <h5 class=\"p-m-0\">Architecture Views</h5>\r\n        <span class=\"p-input-icon-left\">\r\n          <i class=\"pi pi-search\" />\r\n          <InputText placeholder=\"Keyword Search\" />\r\n        </span>\r\n      </div>\r\n    </template>\r\n    <template #empty>\r\n      <span v-if=\"architecture_view_loading\">\r\n        Loading Architecture Views. Please wait.\r\n        <ProgressBar mode=\"indeterminate\" />\r\n      </span>\r\n      <span v-else> There are no Architecture Views. </span>\r\n    </template>\r\n    <template #loading>\r\n      Loading Architecture Views. Please wait.\r\n      <ProgressBar mode=\"indeterminate\" />\r\n    </template>\r\n    <Column selectionMode=\"single\" style=\"min-width: 3rem\"></Column>\r\n    <Column\r\n      field=\"architecture_view_id\"\r\n      header=\"ID\"\r\n      sortable\r\n      style=\"min-width: auto\"\r\n    >\r\n    </Column>\r\n    <Column field=\"name\" header=\"Name\" sortable style=\"min-width: auto\">\r\n    </Column>\r\n    <Column\r\n      field=\"description\"\r\n      header=\"Description\"\r\n      sortable\r\n      style=\"min-width: auto\"\r\n    >\r\n    </Column>\r\n    <Column\r\n      field=\"components\"\r\n      header=\"Architecture Views Components\"\r\n      style=\"min-width: auto\"\r\n    >\r\n      <template #body=\"slotProps\">\r\n        <Dropdown\r\n          :options=\"slotProps.data.components\"\r\n          placeholder=\"Components\"\r\n        />\r\n      </template>\r\n    </Column>\r\n\r\n    <Column header=\"Ad hoc Operations\" style=\"min-width: auto\">\r\n      <template #body>\r\n        <div class=\"btn-align-td\">\r\n          <button\r\n            v-on:click=\"\r\n              deleteArchitectureView(\r\n                this.selected_architecture_view.architecture_view_id\r\n              )\r\n            \"\r\n            class=\"btn btn-secondary\"\r\n            v-tooltip=\"'Select Architecture View first'\"\r\n          >\r\n            <b-icon-trash-fill />\r\n          </button>\r\n        </div>\r\n        <ProgressBar mode=\"indeterminate\" v-if=\"architecture_view_operating\" />\r\n      </template>\r\n    </Column>\r\n  </DataTable>\r\n</template>\r\n \r\n<script>\r\nexport default {\r\n  data() {\r\n    this.listArchitectureViews();\r\n    return {\r\n      architecture_views: \"\",\r\n      selected_architecture_view: \"\",\r\n      architecture_view_loading: true,\r\n      architecture_view_operating: false,\r\n    };\r\n  },\r\n  methods: {\r\n    normalizeArchitectureViews() {\r\n      for (let index = 0; index < this.architecture_views.length; index++) {\r\n        for (var key in this.architecture_views[index]) {\r\n          if (key === \"components\") {\r\n            this.architecture_views[index][key] = this.architecture_views[\r\n              index\r\n            ][key].split(\",\");\r\n          }\r\n        }\r\n      }\r\n    },\r\n    deleteArchitectureView(architecture_view_id) {\r\n      if (architecture_view_id === undefined) {\r\n        this.$toast.add({\r\n          severity: \"warn\",\r\n          summary: \"No Architecture View selected\",\r\n          detail: \"Please select Architecture View first\",\r\n          life: 3000,\r\n        });\r\n      } else {\r\n        this.architecture_view_operating = true;\r\n      }\r\n      this.$axios\r\n        .delete(\"/delete_architecture_view/\" + architecture_view_id)\r\n        .then(() => {\r\n          if (this.architecture_view_operating == true) {\r\n            this.$toast.add({\r\n              severity: \"success\",\r\n              summary: \"Architecture View successfully deleted\",\r\n              detail: \"Architecture View was successfully deleted\",\r\n              life: 3000,\r\n            });\r\n          }\r\n          this.architecture_view_operating = false;\r\n          this.selected_architecture_view = \"\";\r\n          this.listArchitectureViews();\r\n          this.$emit(\"close\");\r\n        })\r\n        .catch(() => {\r\n          this.architecture_view_operating = false;\r\n          this.$toast.add({\r\n            severity: \"error\",\r\n            summary: \"Architecture View Deletion Unsuccessful\",\r\n            detail: \"The selected Architecture View could not be deleted\",\r\n            life: 3000,\r\n          });\r\n          this.selected_architecture_view = \"\";\r\n        });\r\n    },\r\n    strToList(strings) {\r\n      const list_string = strings.split(\",\");\r\n      return list_string;\r\n    },\r\n    listArchitectureViews() {\r\n      this.$axios.get(\"/get_architecture_views\").then((res) => {\r\n        this.architecture_views = res.data.data;\r\n        this.normalizeArchitectureViews();\r\n        if (this.architecture_views.length === 0) {\r\n          this.architecture_view_loading = false;\r\n        }\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\nbutton {\r\n  color: white;\r\n  background: #0c8cd3;\r\n  border: 0px solid blue;\r\n  border-radius: 2px;\r\n}\r\n</style>"]}]}