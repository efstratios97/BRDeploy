{"remainingRequest":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\src\\components\\AddCleanedDataSet.vue?vue&type=style&index=0&id=3c096911&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\src\\components\\AddCleanedDataSet.vue","mtime":1641398527842},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\css-loader\\dist\\cjs.js","mtime":1648597728670},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1648597729334},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\postcss-loader\\src\\index.js","mtime":1648597728778},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648597727882},{"path":"C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1648597728616}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpsYWJlbCB7DQogIGRpc3BsYXk6IGJsb2NrOw0KfQ0KDQouYnRuLWZvcm0gew0KICBjb2xvcjogd2hpdGU7DQogIGJhY2tncm91bmQ6ICMwZDZlZmQ7DQogIGJvcmRlcjogMHB4IHNvbGlkIGJsdWU7DQogIGJvcmRlci1yYWRpdXM6IDJweDsNCn0NCg0Kc2VsZWN0IHsNCiAgY29sb3I6IGJsYWNrOw0KfQ0KDQppbnB1dCB7DQogIGNvbG9yOiBibGFjazsNCn0NCg0KdGV4dGFyZWEgew0KICBjb2xvcjogYmxhY2s7DQp9DQo="},{"version":3,"sources":["C:\\Users\\efstr\\OneDrive\\Desktop\\ProjectAthena\\AthenaSRC\\FrontEnd\\src\\components\\AddCleanedDataSet.vue"],"names":[],"mappings":";AAqlBA,CAAC,CAAC,CAAC,CAAC,EAAE;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACd;;AAEA,CAAC,CAAC,CAAC,CAAC,EAAE;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACd;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACP,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACd","file":"C:/Users/efstr/OneDrive/Desktop/ProjectAthena/AthenaSRC/FrontEnd/src/components/AddCleanedDataSet.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <form>\r\n    <div class=\"p-grid p-fluid\">\r\n      <div class=\"p-col-12 p-md-12\">\r\n        <div class=\"p-inputgroup\">\r\n          <span class=\"p-inputgroup-addon\">\r\n            <i class=\"pi pi-search\"></i>\r\n          </span>\r\n          <Dropdown\r\n            v-model=\"selected_dataset\"\r\n            :options=\"datasets\"\r\n            :filter=\"true\"\r\n            optionLabel=\"dataset\"\r\n            placeholder=\"Choose Dataset\"\r\n            filterPlaceholder=\"Find an Dataset\"\r\n            class=\"multiselect-custom\"\r\n            :showClear=\"true\"\r\n          />\r\n          <Button\r\n            label=\"Find Applicable Cleanser\"\r\n            @click=\"\r\n              toggleShowCleanserSelector();\r\n              updateCleansers();\r\n            \"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"showCleanserSelector\">\r\n      <div class=\"p-grid p-fluid\">\r\n        <div class=\"p-col-12 p-md-12\">\r\n          <div class=\"p-inputgroup\">\r\n            <span class=\"p-inputgroup-addon\">\r\n              <i class=\"pi pi-cog\"></i>\r\n            </span>\r\n            <Dropdown\r\n              v-model=\"selected_cleanser\"\r\n              :options=\"suitable_cleansers\"\r\n              :filter=\"true\"\r\n              optionLabel=\"cleanser.name\"\r\n              placeholder=\"Choose Cleanser\"\r\n              filterPlaceholder=\"Find a Cleanser\"\r\n              class=\"multiselect-custom\"\r\n              :showClear=\"true\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div v-if=\"selected_cleanser !== ''\">\r\n      <h2>Save cleaned Dataset</h2>\r\n      <div class=\"p-grid p-fluid\">\r\n        <div class=\"p-col-12 p-md-12\">\r\n          <div class=\"p-inputgroup\">\r\n            <span class=\"p-inputgroup-addon\">\r\n              <i class=\"pi pi-file\"></i>\r\n            </span>\r\n            <InputText\r\n              placeholder=\"Dataset's Name\"\r\n              v-model=\"name\"\r\n              class=\"inputfield w-full\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"p-grid p-fluid\">\r\n        <div class=\"p-col-12 p-md-12\">\r\n          <Textarea\r\n            placeholder=\"Dataset Description\"\r\n            v-model=\"description\"\r\n            :autoResize=\"true\"\r\n            rows=\"5\"\r\n            cols=\"30\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"p-grid p-fluid\">\r\n        <div class=\"p-col-12 p-md-12\">\r\n          <div class=\"p-inputgroup\">\r\n            <span class=\"p-inputgroup-addon\">\r\n              <i class=\"pi pi-users\"></i>\r\n            </span>\r\n            <MultiSelect\r\n              v-model=\"selected_users\"\r\n              :options=\"users\"\r\n              :filter=\"true\"\r\n              optionLabel=\"user.email\"\r\n              placeholder=\"Assign Users with Access (Optional)\"\r\n              filterPlaceholder=\"Find Users\"\r\n              class=\"multiselect-custom\"\r\n              :showClear=\"true\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"p-grid p-fluid\">\r\n        <div class=\"p-col-12 p-md-12\">\r\n          <div class=\"p-inputgroup\">\r\n            <span class=\"p-inputgroup-addon\">\r\n              <b-icon-building />\r\n            </span>\r\n            <MultiSelect\r\n              v-model=\"selected_departments\"\r\n              :options=\"departments\"\r\n              :filter=\"true\"\r\n              optionLabel=\"dep.name\"\r\n              placeholder=\"Assign Departments with Access (Optional)\"\r\n              filterPlaceholder=\"Find Departments\"\r\n              class=\"multiselect-custom\"\r\n              :showClear=\"true\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"p-grid p-fluid\">\r\n        <div class=\"p-col\">\r\n          <div class=\"card p-align-center\">\r\n            <h5>Delete older Versions of Dataset</h5>\r\n            <InputSwitch\r\n              v-model=\"delete_all_previous_versions\"\r\n              v-tooltip=\"'Datasets can be still recovered from the Archive'\"\r\n              @click=\"listAllDatasets\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"p-grid p-fluid\">\r\n        <div class=\"p-col-12 p-md-12\">\r\n          <Button\r\n            label=\"Save Cleaned Dataset\"\r\n            icon=\"pi pi-plus-circle\"\r\n            iconPos=\"center\"\r\n            @click=\"createCleanedDataSet\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div v-if=\"submitted\">\r\n        <br />\r\n        <ProgressBar mode=\"indeterminate\" v-if=\"submitted\" />\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <transition class=\"modal-animation\">\r\n    <modal-view v-if=\"new_label\">\r\n      <template v-slot:header>New Dataset Identified</template>\r\n      <template v-slot:body>\r\n        <h3>\r\n          The Dataset you upload seems <b>not</b> to have any predecessors.\r\n          Please label your Dataset with a designated Label. By doing so the\r\n          next time you upload a newer version of Dataset it will automatically\r\n          be assigned to the correct Label.\r\n        </h3>\r\n        <form>\r\n          <div class=\"p-grid p-fluid\">\r\n            <div class=\"p-col-12 p-md-12\">\r\n              <div class=\"p-inputgroup\">\r\n                <span class=\"p-inputgroup-addon\">\r\n                  <i class=\"pi pi-tag\"></i>\r\n                </span>\r\n                <InputText\r\n                  placeholder=\"Labels's Name\"\r\n                  v-model=\"label_name\"\r\n                  class=\"inputfield w-full\"\r\n                  v-tooltip=\"'Label Name must be unique!'\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-grid p-fluid\">\r\n            <div class=\"p-col-12 p-md-12\">\r\n              <Button\r\n                label=\"Assign Label\"\r\n                icon=\"pi pi-tag\"\r\n                iconPos=\"center\"\r\n                @click=\"assignLabel\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </form> </template\r\n    ></modal-view>\r\n  </transition>\r\n  <Dialog\r\n    v-model:visible=\"cleaned_operation\"\r\n    :breakpoints=\"{ '960px': '75vw', '640px': '100vw' }\"\r\n    :style=\"{ width: '50vw' }\"\r\n  >\r\n    <DataTable\r\n      :value=\"cleaned_rows\"\r\n      v-model:selection=\"selectedCleanedRows\"\r\n      dataKey=\"Name\"\r\n      :paginator=\"true\"\r\n      :rows=\"10\"\r\n      filterDisplay=\"menu\"\r\n      paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n      :rowsPerPageOptions=\"[10, 25, 50]\"\r\n      currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\r\n      responsiveLayout=\"scroll\"\r\n      :rowHover=\"true\"\r\n      showGridlines\r\n      stripedRows\r\n      ref=\"dt\"\r\n      p-dataTable\r\n      csvSeparator=\";\"\r\n    >\r\n      <template #header>\r\n        <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n          <h5 class=\"p-m-0\">Cleaned Rows</h5>\r\n          <span class=\"p-input-icon-left\">\r\n            <Button\r\n              icon=\"pi pi-external-link\"\r\n              label=\"Export\"\r\n              @click=\"exportCSV($event)\"\r\n            />\r\n          </span>\r\n          <span class=\"p-input-icon-right\">\r\n            <Button\r\n              icon=\"pi pi-cloud-upload\"\r\n              label=\"Return Rows to Dataset\"\r\n              @click=\"return_rows_to_dataset()\"\r\n            />\r\n          </span>\r\n          <span class=\"p-input-icon-right\">\r\n            <Button\r\n              icon=\"pi pi-chevron-circle-down\"\r\n              label=\"Close\"\r\n              @click=\"close()\"\r\n            />\r\n          </span>\r\n        </div>\r\n      </template>\r\n      <template #empty>\r\n        <span v-if=\"architecture_view_loading\">\r\n          Loading Cleaned Rows. Please wait.\r\n          <ProgressBar mode=\"indeterminate\" />\r\n        </span>\r\n        <span v-else> There are no Cleaned Rows. </span>\r\n      </template>\r\n      <template #loading>\r\n        Loading Cleaned Rows. Please wait.\r\n        <ProgressBar mode=\"indeterminate\" />\r\n      </template>\r\n      <Column selectionMode=\"multiple\" style=\"min-width: 3rem\"></Column>\r\n      <Column\r\n        v-for=\"col of columns\"\r\n        :field=\"col\"\r\n        :header=\"col\"\r\n        :key=\"col\"\r\n        sortable\r\n      ></Column>\r\n    </DataTable>\r\n  </Dialog>\r\n</template>\r\n\r\n<script>\r\nimport Modal from \"../components/Modal.vue\";\r\nexport default {\r\n  components: {\r\n    \"modal-view\": Modal,\r\n  },\r\n  data() {\r\n    return {\r\n      name: \"\",\r\n      cleaned: \"\",\r\n      description: \"\",\r\n      storageType: true,\r\n      file: \"\",\r\n      users: this.getUsersOptions(),\r\n      departments: this.getDepartmentsOptions(),\r\n      datasets: this.getDatasetOptions(),\r\n      datasets_all: \"\",\r\n      suitable_cleansers: [],\r\n      selected_users: \"\",\r\n      selected_dataset: \"\",\r\n      selected_departments: \"\",\r\n      selected_cleanser: \"\",\r\n      formData: \"\",\r\n      submitted: false,\r\n      new_label: false,\r\n      cleaned_operation: false,\r\n      selectedCleanedRows: \"\",\r\n      formData_cleaned_rows: \"\",\r\n      cleaned_rows: \"\",\r\n      columns: \"\",\r\n      showCleanserSelector: false,\r\n      label_name: \"\",\r\n      delete_all_previous_versions: false,\r\n      new_created_dataset: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    toggleShowCleanserSelector() {\r\n      this.showCleanserSelector = !this.showCleanserSelector;\r\n    },\r\n    getUsersOptions() {\r\n      this.$axios.get(\"/users\").then((res) => {\r\n        var users_tmp = [];\r\n        for (let index = 0; index < res.data.length; index++) {\r\n          users_tmp.push({ user: res.data[index] });\r\n        }\r\n        this.users = users_tmp;\r\n      });\r\n    },\r\n    getDepartmentsOptions() {\r\n      this.$axios.get(\"/departments\").then((res) => {\r\n        var departments_tmp = [];\r\n        for (let index = 0; index < res.data.length; index++) {\r\n          departments_tmp.push({ dep: res.data[index] });\r\n        }\r\n        this.departments = departments_tmp;\r\n      });\r\n    },\r\n    toString(dict_key) {\r\n      var key_word = \"\";\r\n      var object_input = \"\";\r\n      if (dict_key === \"user\") {\r\n        key_word = \"email\";\r\n        object_input = this.selected_users;\r\n      } else if (dict_key === \"dep\") {\r\n        key_word = \"name\";\r\n        object_input = this.selected_departments;\r\n      } else if (dict_key === \"dataset\") {\r\n        object_input = this.selected_datasets;\r\n      } else if (dict_key === \"cleanser\") {\r\n        object_input = this.suitable_cleansers;\r\n      }\r\n      var updt_list = \"\";\r\n      if (dict_key === \"user\" || dict_key === \"dep\") {\r\n        for (let index = 0; index < object_input.length; index++) {\r\n          updt_list = updt_list.concat(object_input[index][dict_key][key_word]);\r\n          updt_list = updt_list.concat(\",\");\r\n        }\r\n      } else if (dict_key === \"dataset\" || dict_key === \"cleanser\") {\r\n        for (let index = 0; index < object_input.length; index++) {\r\n          var temp_elem = object_input[index][dict_key];\r\n          if (dict_key === \"dataset\") {\r\n            temp_elem = object_input[index][dict_key].split(\"ID: \")[1];\r\n          }\r\n          updt_list = updt_list.concat(temp_elem);\r\n          updt_list = updt_list.concat(\",\");\r\n        }\r\n      }\r\n      return updt_list.slice(0, -1);\r\n    },\r\n    createCleanedDataSet() {\r\n      this.$axios\r\n        .get(\r\n          \"/get_cleanser_by_id/\" + this.selected_cleanser.cleanser.cleanser_id\r\n        )\r\n        .then((res) => {\r\n          this.submitted = true;\r\n          this.$toast.add({\r\n            severity: \"info\",\r\n            summary: \"The Dataset is being cleaned\",\r\n            detail: \"Please be aware that this may take few minutes\",\r\n            life: 15000,\r\n          });\r\n          this.selected_cleanser = res.data.data[0];\r\n          this.formData = new FormData();\r\n          this.formData.append(\"name\", this.name);\r\n          this.formData.append(\r\n            \"cleanser_operation_types\",\r\n            this.selected_cleanser.cleanser_operation_types\r\n          );\r\n          this.formData.append(\"cleaned\", this.cleaned);\r\n          this.formData.append(\"description\", this.description);\r\n          this.formData.append(\r\n            \"storage_type\",\r\n            this.storageType === true ? \"cloud\" : \"local\"\r\n          );\r\n          this.formData.append(\"access_user_list\", this.toString(\"user\"));\r\n          this.formData.append(\r\n            \"access_business_unit_list\",\r\n            this.toString(\"dep\")\r\n          );\r\n          this.$axios\r\n            .post(\r\n              \"/create_cleaned_dataset/\" +\r\n                this.selected_cleanser.cleanser_id +\r\n                \"/\" +\r\n                this.selected_dataset[\"dataset\"].split(\"ID: \")[1] +\r\n                \"/\" +\r\n                localStorage.loggedUser,\r\n              this.formData\r\n            )\r\n            .then((res) => {\r\n              this.cleaned_rows = JSON.parse(res.data.eliminated_rows);\r\n              this.columns = Object.keys(this.cleaned_rows[0]);\r\n              this.submitted = false;\r\n              this.cleaned_operation = true;\r\n              this.new_created_dataset = res.data; //consists of a cleaned_dataset and a dataset with removed rows\r\n              if (\r\n                this.new_created_dataset.cleaned_dataset[\"label\"] ===\r\n                \"NO_LABEL_6aba48df0cb55992803d864977c3aa204520d659\"\r\n              ) {\r\n                this.new_label = true;\r\n              }\r\n              if (this.delete_all_previous_versions) {\r\n                this.delete_all_previous_versions_of_datasets();\r\n              }\r\n              this.$toast.add({\r\n                severity: \"success\",\r\n                summary: \"Cleaned Dataset Creation Successful\",\r\n                detail: \"The cleaned Dataset was created\",\r\n                life: 3000,\r\n              });\r\n            })\r\n            .catch(() => {\r\n              this.$toast.add({\r\n                severity: \"error\",\r\n                summary: \"Cleaned Dataset Creation Unsuccessful\",\r\n                detail: \"The cleaned Dataset could not be created\",\r\n                life: 3000,\r\n              });\r\n              this.submitted = false;\r\n            });\r\n        });\r\n    },\r\n    getDatasetOptions() {\r\n      this.$axios\r\n        .get(\"/get_datasets_only_name/\" + localStorage.loggedUser)\r\n        .then((res) => {\r\n          var datasets_tmp = [];\r\n          for (let index = 0; index < res.data.data.length; index++) {\r\n            datasets_tmp.push({\r\n              dataset:\r\n                \"NAME: \" +\r\n                res.data.data[index][\"name\"] +\r\n                \"   |   \" +\r\n                \"ID: \" +\r\n                res.data.data[index][\"dataset_id\"],\r\n            });\r\n          }\r\n          this.datasets = datasets_tmp;\r\n        });\r\n    },\r\n    getSuitableCleansersOptions() {\r\n      // if (this.selected_dataset === undefined) {\r\n      //   this.selected_dataset = \" \";\r\n      // }\r\n      this.$axios\r\n        .get(\r\n          \"/get_suitable_cleansers/\" +\r\n            this.selected_dataset[\"dataset\"].split(\"ID: \")[1]\r\n        )\r\n        .then((res) => {\r\n          var cleanser_tmp = [];\r\n          for (let index = 0; index < res.data.data.length; index++) {\r\n            cleanser_tmp.push({\r\n              cleanser: res.data.data[index],\r\n            });\r\n          }\r\n          this.suitable_cleansers = cleanser_tmp;\r\n          if (cleanser_tmp.length === 0) {\r\n            this.$toast.add({\r\n              severity: \"error\",\r\n              summary: \"No suitable Cleansers available\",\r\n              detail: \"The Dataset has no suitable cleanser\",\r\n              life: 3000,\r\n            });\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.$toast.add({\r\n            severity: \"error\",\r\n            summary: \"No suitable Cleansers available\",\r\n            detail: \"The Dataset has no suitable cleanser\",\r\n            life: 3000,\r\n          });\r\n        });\r\n    },\r\n    exportCSV() {\r\n      this.$refs.dt.exportCSV();\r\n    },\r\n    close() {\r\n      if (this.new_label) {\r\n        this.cleaned_operation = false;\r\n      } else {\r\n        this.$emit(\"close\");\r\n      }\r\n    },\r\n    assignLabel() {\r\n      this.$axios\r\n        .post(\r\n          \"/assign_label/\" +\r\n            this.new_created_dataset.cleaned_dataset.dataset_id +\r\n            \"/\" +\r\n            this.label_name\r\n        )\r\n        .then(() => {\r\n          this.$toast.add({\r\n            severity: \"success\",\r\n            summary: \"Label Creation Successful\",\r\n            detail:\r\n              \"The Label was created and assigned to your Dataset and will be assigned to any future similar Dataset automatically\",\r\n            life: 10000,\r\n          });\r\n          this.new_label = false;\r\n          this.close();\r\n        })\r\n        .catch(() => {\r\n          this.$toast.add({\r\n            severity: \"error\",\r\n            summary: \"Label Creation Unuccessful\",\r\n            detail:\r\n              \"The Label could not have been assigned! Check if the given Name is unique\",\r\n            life: 7000,\r\n          });\r\n        });\r\n    },\r\n    return_rows_to_dataset() {\r\n      this.$toast.add({\r\n        severity: \"info\",\r\n        summary: \"Row Re-Addition is starting\",\r\n        detail: \"Adding selected Rows will start shortly\",\r\n        life: 5000,\r\n      });\r\n      for (let index = 0; index < this.selectedCleanedRows.length; index++) {\r\n        var element = this.selectedCleanedRows[index];\r\n        var jsonString = JSON.stringify(element);\r\n        this.$axios\r\n          .post(\r\n            \"/return_to_dataset_cleaned_rows/\" +\r\n              this.new_created_dataset.cleaned_dataset.dataset_id,\r\n            jsonString\r\n          )\r\n          .then(() => {\r\n            this.$toast.add({\r\n              severity: \"success\",\r\n              summary: \"Row Re-Addition was Succesul\",\r\n              detail:\r\n                \"Following Row was added:\\n \" +\r\n                jsonString.substring(1, 130) +\r\n                \"......\",\r\n              life: 5000,\r\n            });\r\n          })\r\n          .catch(() => {\r\n            this.$toast.add({\r\n              severity: \"error\",\r\n              summary: \"Row RE-Addition Unsuccessful\",\r\n              detail:\r\n                \"The selected Row could not be re-added! Check if Row is compatible with dataset\",\r\n              life: 3000,\r\n            });\r\n          });\r\n      }\r\n      if (this.selectedCleanedRows.length === 0) {\r\n        this.$toast.add({\r\n          severity: \"warn\",\r\n          summary: \"No Row selected\",\r\n          detail: \"Please select a Row to re-add to dataset\",\r\n          life: 5000,\r\n        });\r\n      } else {\r\n        this.close();\r\n      }\r\n    },\r\n    updateCleansers() {\r\n      this.$axios\r\n        .post(\"/update_cleansers/\" + localStorage.loggedUser)\r\n        .then(() => {\r\n          this.getSuitableCleansersOptions();\r\n        });\r\n    },\r\n    delete_all_previous_versions_of_datasets() {\r\n      var label_of_dataset = this.new_created_dataset.cleaned_dataset.label;\r\n      for (let index = 0; index < this.datasets_all.length; index++) {\r\n        if (label_of_dataset === this.datasets_all[index].label) {\r\n          this.$axios.delete(\r\n            \"/delete_dataset/\" +\r\n              this.datasets_all[index].dataset_id +\r\n              \"/\" +\r\n              this.datasets_all[index].storage_type\r\n          );\r\n        }\r\n      }\r\n    },\r\n    listAllDatasets() {\r\n      this.$axios\r\n        .get(\"/get_datasets/\" + localStorage.loggedUser)\r\n        .then((res) => {\r\n          this.datasets_all = res.data.data;\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\nlabel {\r\n  display: block;\r\n}\r\n\r\n.btn-form {\r\n  color: white;\r\n  background: #0d6efd;\r\n  border: 0px solid blue;\r\n  border-radius: 2px;\r\n}\r\n\r\nselect {\r\n  color: black;\r\n}\r\n\r\ninput {\r\n  color: black;\r\n}\r\n\r\ntextarea {\r\n  color: black;\r\n}\r\n</style>"]}]}