import { h } from '@stencil/core';
import DataStore from '../../store/dataSource/data.store';
import ViewportStore from '../../store/viewPort/viewport.store';
import { UUID } from '../../utils/consts';
import { RowHeaderRender } from './row-header-render';
const LETTER_BLOCK_SIZE = 10;
const RevogrRowHeaders = ({ anyView, height, rowHeaderColumn, beforeRowAdd, onScrollViewport, onElementToScroll }) => {
  const dataViews = [];
  const viewport = new ViewportStore();
  /** render viewports rows */
  let totalLength = 1;
  for (let data of anyView.dataPorts) {
    const colData = new DataStore('colPinStart');
    const rowSelectionStore = beforeRowAdd(data.position.y);
    const dataStore = new DataStore(data.type);
    dataStore.updateData(data.dataStore.get('source'));
    // initiate column data
    const column = Object.assign({ cellTemplate: RowHeaderRender(totalLength) }, rowHeaderColumn);
    colData.updateData([column]);
    dataViews.push(h("revogr-data", Object.assign({ slot: "content" }, data, { dataStore: dataStore.store, colData: colData.store, viewportCol: viewport.store, readonly: true, range: false, rowSelectionStore: rowSelectionStore.store })));
    totalLength += data.dataStore.get('items').length;
  }
  const colSize = (rowHeaderColumn === null || rowHeaderColumn === void 0 ? void 0 : rowHeaderColumn.size) || (totalLength.toString().length + 1) * LETTER_BLOCK_SIZE;
  viewport.setViewport({
    realCount: 1,
    virtualSize: 0,
    items: [
      {
        size: colSize,
        start: 0,
        end: colSize,
        itemIndex: 0,
      },
    ],
  });
  const parent = `${anyView.prop[UUID]}-rowHeaders`;
  return (h("revogr-viewport-scroll", Object.assign({}, { [UUID]: parent }, { contentHeight: height, contentWidth: 0, class: "rowHeaders", key: "rowHeaders", style: { minWidth: `${colSize}px` }, ref: el => onElementToScroll(el), onScrollViewport: e => onScrollViewport(e.detail) }),
    h("revogr-header", Object.assign({}, Object.assign(Object.assign({}, anyView.headerProp), { colData: typeof rowHeaderColumn === 'object' ? [rowHeaderColumn] : [] }), { viewportCol: viewport.store, parent: parent, slot: "header", canResize: false })),
    dataViews));
};
export default RevogrRowHeaders;
